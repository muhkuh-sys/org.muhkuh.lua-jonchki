TODO
----

* Platform specific aritfacts
Currently the artifacts are one bundle for all supported platforms. This makes
it cumbersome to add a new platform - it always requires a new version.
Separate packages for each platform could circumvent this problem. They are
also smaller than one collection for all, especially for bigger artifacts
like curl or wxWidgets.

Platform independent packages (PIP) still make sense though. Best example are the
pure LUA packets. Both types should be possible.

Platform specific packages (PSP) have the platform identifier after the
version number. Example: "lua5.1-filesystem-1.6.3.1-ubuntu_1604_x86_64"

The search routine first looks for the PIP, then for the PSP.

The cache gets a new entry for the complete platform identifier. It is the
empty string for a PIP and the platform identifier for a PSP.


* Disable a repository if the initial access to the root location failed.
This prevents multiple accesses to non-existing URLs.

* Replace lualogging with lua-log.
It makes different log prefixes easier.

* Maybe it would be better in some cases to allow one packet for each distribution instead of bundeling all of them in one archive.
One of the major drawbacks of the current solution is that a new version of a distribution forces a new version of each architecture-dependant package at the moment.
For example: Ubuntu 18.04 is released. All packages with compiled code must be updated.

* Show the source of an artifact in the report.
To include detailed information about artifacts served by the cache, a source field should be added there. This would allow inforation like this:
 SHORT_ID
or
 SHORT_ID (cached)

* Add a command mode with something like a maintenance mode. One command for the maintenance mode is to clear the complete cache.
Another command is a repository sync mode. It takes a list of artifacts and checks the available versions in the different repositories. The output could be XML with a nice stylesheet.
To prevent complete downloads, only the headers could be fetched (curl -I <URL>).

* The cache database (including the scans) identifies the repositories only with a short ID.
If the URL behind this ID changes, all information in the cache does not make sense any more. The result is a big mess.
Changes in the configuration should be detected somehow. The database must be invalidated.

Maybe something like this will work:
Combine all relevant parts of the configuration to a hash sum and store it in a new table. For example, the paths are relevant, but not the rescan time.
The hash is checked always at the start of the tool. If it does not match, all information connected to the ID is removed from the cache.

* Download files in parallel.
For this something like a download phase is needed.

* Measure download times and pick the fastest mirror.
Distinguish the total time for a download in 2 items:
1) the initial reaction time until the first chunk of data arrives.
2) the download time for the complete data phase.

* Dump the complete Resolv Tree to the report.
This is neccessary to examine error situations.

The dump should happen at the end of the jonchki_core function regardless of the result in tResult.
The representation in the report should be something like this:

  a.b.c
    v1.2.3: blocked
      dependency group 0:
        d.e.f:
          v4.5.6: blocked
            sha sum does not match
          v4.5.7: ok
        g.h.i:
          v2.3.4: blocked





* Cache max size einhalten
  Immer nach neuem Artifact oder Configuration testen.

* Orphaned Files finden und löschen
Wie: walk über alle files
 Name = "cache.sqlite3" -> OK
 Name in DB (Artifact, *hash, Configuration, *hash) -> OK
 Sonst nicht OK und weg
Wann: Beim kompletten rebuild der DB und wenn ein Fehler festgestellt wurde (z.B. Hash error)

* Bei Fehler Eintrag aus der DB schmeißen

* Artifact mit luaarchive entpacken -> mehrere Formate möglich, z.B. .tar.xz

* luaarchive im Installer bereitstellen, um Archive erstellen zu können

* Hash im Installer erreichbar machen, um .hash Files erstellen zu können

* Add a link to the parent object in the resolve table. This is important for good error messages about one instance.
Example:
Error xyz in group/artifact/version required by
 G/A/V ->
   G/A/V ->
     G/A/V

* Recognize artifacts which were already processed before and do not resolve them again.
Be careful to create something which will also work with other resolvers than "exact".

* Store error messages or warnings for any resolve operations in the GA->V table.

* Store error messages for the resolve process in the resolve table.


INSTALLER
---------

Make Jonchki build packages of itself. This is possible by using system components for downloading, archive handling, XML and database access. Pure LUA libraries are just part of the repository.
The system components can be installed on a standard Ubuntu >=14.04 with...

  apt-get install --assume-yes lua5.1 lua-filesystem lua-expat lua-sql-sqlite3 lua51-mhash lua-sql-sqlite3

Please note that lua51-mhash is available here: https://build.opensuse.org/package/show/home:doc_bacardi/lua51-mhash
Maybe we should add a system replacement for lua51-mhash if it is not available. Possible candidates would be "sha1sum" and friends.


DONE
----

* Select the "install root artifact" parameter with a command mode.
A complete install (i.e. including the root artifact) should be "install".
If the install should skip the root artifact, it should be "install-dependencies" or something like this.

* Remember the time when a remote repository was scanned for the versions of a specific artifact.
Use only the cache if a configureable time has not elapsed.

This allows a local-only operation if a specific artifact is used more often.

Scan the remote repository anyway if the artifact could not be found in the cache.

* Compare the group, module, artifact and version of a new artifact configuration with the expected values.
This prevents strange errors in several cases:
1) The artifact configuration is wrong. This might happen for new aritfacts.
2) The group, module or artifact name of an aritfact changed. This happened with the luasql module, which had the group "com.github.keplerproject.lua" and was renamed to "com.github.keplerproject" later.
Services like GitHub provide a redirect from the old name to the new one. An old Jonchki configuration still had the old group name, but got the new configuration over the GitHub redirect.

* Write the report even when an error occurs.

* If an artifact is present multiple times in the dependency tree, the version scan is executed each time.
It should be executed only once instead.

* Hash in .hash Datei speichern. Da stehen 1 oder mehrere Zeilen drin, die die folgende Form haben:
   <HASH_ID>:<HASH>
  z.B.
   SHA1:0123456...
   SHA384:0123456...

* Change the Logger to a ReportWriter. This should produce something like the IVY report file.

* Better linking for the report.
The report is currently building the tree of artifacts with the "id" and "parentID" attributes.
This is no longer working since double artifacts are just references to existing ones.
One artifact can have multiple parents.
